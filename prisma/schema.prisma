generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User Management
model User {
  id                     Int        @id @default(autoincrement())
  email                  String     @unique
  name                   String
  password               String
  created_at             DateTime   @default(now())
  updated_at             DateTime   @updatedAt
  roles                  Role[]     // User roles
  posts                  Post[]     // Posts written by the user
  comments               Comment[]  // Comments written by the user
  liked_posts            PostLike[] // Posts liked by the user
}

/// Role Management
model Role {
    id          Int              @id @default(autoincrement())
    name        String           @unique
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    users       User[]
    permissions RolePermission[]
}

model Permission {
    id         Int              @id @default(autoincrement())
    permission String           @unique
    slug       String           @unique
    roles      RolePermission[]
}

model RolePermission {
    id           Int        @id @default(autoincrement())
    roleId       Int
    permissionId Int
    Role         Role       @relation(fields: [roleId], references: [id])
    Permission   Permission @relation(fields: [permissionId], references: [id])
}

/// Blog Post Management
model Post {
  id            Int          @id @default(autoincrement())
  title         String
  content       String
  slug          String        @unique
  published     Boolean       @default(false)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  author_id     Int
  category_id   Int
  tags          Tag[]         // Associated tags
  comments      Comment[]     // Comments on the post
  likes         PostLike[]    // Users who liked the post
  author        User          @relation(fields: [author_id], references: [id])
  category      Category      @relation(fields: [category_id], references: [id])
}

/// Categories for Posts
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  posts     Post[]   // Posts in this category
}

/// Tags for Posts
model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  posts     Post[]   // Posts with this tag
}

/// Comments on Posts
model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  post_id    Int
  author_id  Int
  post       Post     @relation(fields: [post_id], references: [id])
  author     User     @relation(fields: [author_id], references: [id])
}

/// Likes on Posts
model PostLike {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
  post       Post     @relation(fields: [post_id], references: [id])
}

/// UI Elements: Banners
model Banner {
  id         Int      @id @default(autoincrement())
  title      String
  subtitle   String
  url        String
  image_url  String
  created_at DateTime @default(now())
}

/// Testimonials
model Testimonial {
  id           Int      @id @default(autoincrement())
  client_name  String
  client_image String?
  content      String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

/// Advertisements
model Ad {
  id          Int       @id @default(autoincrement())
  title       String
  url         String
  image_url   String
  start_time  DateTime?
  end_time    DateTime?
  created_at  DateTime @default(now())
}
